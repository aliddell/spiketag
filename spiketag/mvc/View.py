from phy import gui
from ..view import *
import PyQt4
from PyQt4 import QtGui

class MainView(object):
	"""docstring for View"""
	def __init__(self):
		self.gui = gui.GUI()
		self.param_view = param_widget()
		self.spk_view = spike_view()
		self.scatter_view = scatter_3d_view()
                self.wave_view = wave_view()
                self.gui.add_view(self.param_view, position='left', name='params')
                self.gui.add_view(self.scatter_view)
                self.gui.add_view(self.spk_view)
                self.gui.add_view(self.wave_view, position='bottom')
                self.gs = {'geometry': PyQt4.QtCore.QByteArray('\x01\xd9\xd0\xcb\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x01y\x00\x00\n\x05\x00\x00\x06\xe4\x00\x00\x00\x00\x00\x00\x01y\x00\x00\n\x05\x00\x00\x06\xe4\x00\x00\x00\x01\x00\x00'),
                 'state': PyQt4.QtCore.QByteArray('\x00\x00\x00\xff\x00\x00\x00\x00\xfd\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\n\x06\x00\x00\x05-\xfc\x02\x00\x00\x00\x06\xfb\x00\x00\x00\x1e\x00m\x00u\x00l\x00t\x00i\x00w\x00a\x00v\x00e\x00_\x00v\x00i\x00e\x00w\x000\x01\x00\x00\x00\x19\x00\x00\x02U\x00\x00\x00\x00\x00\x00\x00\x00\xfb\x00\x00\x00\x14\x00w\x00a\x00v\x00e\x00_\x00v\x00i\x00e\x00w\x000\x01\x00\x00\x03\xd0\x00\x00\x01\x9a\x00\x00\x00\x00\x00\x00\x00\x00\xfb\x00\x00\x00\x16\x00s\x00p\x00i\x00k\x00e\x00_\x00v\x00i\x00e\x00w\x002\x01\x00\x00\x03;\x00\x00\x00\x19\x00\x00\x00\x00\x00\x00\x00\x00\xfb\x00\x00\x00\x16\x00s\x00p\x00i\x00k\x00e\x00_\x00v\x00i\x00e\x00w\x001\x01\x00\x00\x00!\x00\x00\x03\x0c\x00\x00\x00\x00\x00\x00\x00\x00\xfc\x00\x00\x00!\x00\x00\x05-\x00\x00\x01\x86\x00\xff\xff\xff\xfc\x01\x00\x00\x00\x03\xfb\x00\x00\x00\x0c\x00p\x00a\x00r\x00a\x00m\x00s\x01\x00\x00\x00\x00\x00\x00\x01[\x00\x00\x01Z\x00\xff\xff\xff\xfb\x00\x00\x00 \x00s\x00c\x00a\x00t\x00t\x00e\x00r\x00_\x003\x00d\x00_\x00v\x00i\x00e\x00w\x000\x01\x00\x00\x01a\x00\x00\x03\xc8\x00\x00\x008\x00\xff\xff\xff\xfb\x00\x00\x00\x16\x00s\x00p\x00i\x00k\x00e\x00_\x00v\x00i\x00e\x00w\x000\x01\x00\x00\x05/\x00\x00\x04\xd7\x00\x00\x008\x00\xff\xff\xff\xfc\x00\x00\x02\x0b\x00\x00\x03C\x00\x00\x00\x00\x00\xff\xff\xff\xfc\x01\x00\x00\x00\x01\xfb\x00\x00\x00 \x00s\x00c\x00a\x00t\x00t\x00e\x00r\x00_\x003\x00d\x00_\x00v\x00i\x00e\x00w\x000\x01\x00\x00\x00\x00\x00\x00\x04\x1d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05-\x00\x00\x00\x04\x00\x00\x00\x04\x00\x00\x00\x08\x00\x00\x00\x08\xfc\x00\x00\x00\x00')}
		####################################

	def set_data(self, ch=None, mua=None, spk=None, fet=None, clu=None):
                self.spk_view.set_data(spk, clu)
		self.scatter_view.set_data(fet, clu)
                self.wave_view.set_data(ch, clu)
		# if spk is not None and clu is None:
		# 	self.spk_view.set_data(spk[self.ch])
		# if fet is not None and clu is None:
		# 	self.scatter_view.set_data(fet[self.ch])
		# if spk is not None and clu is not None:
		# 	self.spk_view.set_data(spk[self.ch], clu[self.ch])
		# if fet is not None and clu is not None:
		# 	self.scatter_view.set_data(fet[self.ch], clu[self.ch])

        def bind_data(self, data=None, spktag=None):
                self.wave_view.bind(data,spktag)

	def show(self):
		self.gui.show()
		self.gui.restore_geometry_state(self.gs)
